@import "./_mixins.scss";
@import "./config";

/* CONTAINER */
.container {
  max-width: map-get($map: $breakpoints, $key: ju);
  padding-top: 2rem;
  margin: 0 auto;
  overflow: hidden;
}

/* PAGE DEFAULTS */
.page {
  padding: 0.75rem;

  & .page-header {
    font-size: 2rem;
    font-weight: bold;
    letter-spacing: 0.1rem;
    line-height: 1.25;

    & span > i {
      color: map-get($map: $colors, $key: my-gold);
    }
  }
}

/* PREVIEW DISPLAY */
.preview {
  margin: 0.5rem 0;
  padding: 0.5rem;
  @include set-background(map-get($map: $colors, $key: my-gold));
  border-radius: 0.25rem;
  box-shadow: -0.75rem 0rem 0.9rem -0.5rem map-get($map: $colors, $key: dark),
    0.75rem 0rem 0.9rem -0.5rem map-get($map: $colors, $key: dark),
    0.35rem 0.35rem 1rem 0.35rem rgba(0, 0, 0, 0);

  & .preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
}

/* TYPOGRAPHY */
.main-header {
  font-size: 2rem;
  font-weight: bold;
  letter-spacing: 0.1rem;
  line-height: 1.25;
}

.title {
  font-size: 1.5rem;
  font-weight: bold;
  letter-spacing: 0.25rem;
  line-height: 1;
}

.lead {
  font-size: 1.25rem;
  font-weight: 500;
  line-height: 1;
}

/* BACKGROUNDS */
.bg {
  &-primary {
    @include set-background(map-get($map: $colors, $key: primary));
  }
  &-secondary {
    @include set-background(map-get($map: $colors, $key: secondary));
  }
  &-success {
    @include set-background(map-get($map: $colors, $key: success));
  }
  &-info {
    @include set-background(map-get($map: $colors, $key: info));
  }
  &-warning {
    @include set-background(map-get($map: $colors, $key: warning));
  }
  &-danger {
    @include set-background(map-get($map: $colors, $key: danger));
  }
  &-light {
    @include set-background(map-get($map: $colors, $key: light));
  }
  &-dark {
    @include set-background(map-get($map: $colors, $key: primary));
  }
  &-gold {
    @include set-background(map-get($map: $colors, $key: my-gold));
  }
}

/* BUTTONS */
.btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  border: none;
  cursor: pointer;
  font-size: 1.5rem;
  text-align: center;
  outline: none;
  transition: all 0.2s ease-in;
  border-radius: 0.2rem;

  @media screen and (min-width: map-get($map: $breakpoints, $key: lg)) {
    padding: 0.5rem 1.25rem;
    font-size: 1.25rem;
  }

  &.btn {
    &-primary {
      @include set-background(map-get($map: $colors, $key: primary));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: primary));
      }
    }
    &-secondary {
      @include set-background(map-get($map: $colors, $key: secondary));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: secondary));
      }
    }
    &-success {
      @include set-background(map-get($map: $colors, $key: success));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: success));
      }
    }
    &-info {
      @include set-background(map-get($map: $colors, $key: info));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: info));
      }
    }
    &-warning {
      @include set-background(map-get($map: $colors, $key: warning));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: warning));
      }
    }
    &-danger {
      @include set-background(map-get($map: $colors, $key: danger));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: danger));
      }
    }
    &-light {
      @include set-background(map-get($map: $colors, $key: light));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: light));
      }
    }
    &-dark {
      @include set-background(map-get($map: $colors, $key: dark));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: dark));
      }
    }
    &-gold {
      @include set-background(map-get($map: $colors, $key: my-gold));
      &:hover {
        @include set-btn-hover(map-get($map: $colors, $key: my-gold));
      }
    }
  }

  &.disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &.hide {
    display: none;
  }
}

/* HIDE MEDIA QUERIES */
.hide {
  @each $breakpoint, $bp-value in $breakpoints {
    &-#{$breakpoint} {
      display: inline-block;
      @media screen and (min-width: #{$bp-value}) {
        display: none;
      }
    }
  }
}

.show {
  @each $breakpoint, $bp-value in $breakpoints {
    &-#{$breakpoint} {
      display: none;
      @media screen and (min-width: #{$bp-value}) {
        display: inline-block;
      }
    }
  }
}

/* ALERTS */
.alerts {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  margin: 0 auto;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 10;

  & .alert {
    position: absolute;
    top: 50%;
    left: 25%;
    transform: translate(-18.75%, -50%);
    margin: 0 auto;
    padding: 0.5rem;
    border-radius: 0.75rem;

    @media screen and (min-width: map-get($map: $breakpoints, $key: sm)) {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 1.5rem;
    }

    &-primary {
      @include set-background(map-get($map: $colors, $key: primary));
    }
    &-secondary {
      @include set-background(map-get($map: $colors, $key: secondary));
    }
    &-success {
      @include set-background(map-get($map: $colors, $key: success));
    }
    &-info {
      @include set-background(map-get($map: $colors, $key: info));
    }
    &-warning {
      @include set-background(map-get($map: $colors, $key: warning));
    }
    &-danger {
      @include set-background(map-get($map: $colors, $key: danger));
    }
    &-light {
      @include set-background(map-get($map: $colors, $key: light));
    }
    &-dark {
      @include set-background(map-get($map: $colors, $key: dark));
    }

    & button {
      position: fixed;
      border-radius: 50%;
      width: 1.5rem;
      height: 1.5rem;
      padding: 0;
      margin: 0 auto;
      line-height: 0.5;
      font-size: 2rem;
      top: 0;
      right: 0;
      opacity: 0.75;
    }
  }
}

/* CARDS */
.cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 0.75rem;
  margin: 0.25rem 0;

  .card {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: space-between;
    border: 0.1rem solid map-get($map: $colors, $key: dark);
    border-radius: 0.5rem;
    @include set-background(map-get($map: $colors, $key: light));

    & .card-img {
      object-fit: cover;
      min-height: 250px;
      max-height: 250px;
      background-position: center;

      &.disabled {
        opacity: 0.65;
      }
    }

    & .card-body {
      padding: 0.5rem;
      display: flex;
      flex-direction: column;
      justify-content: space-between;

      & .card-title {
        font-size: 1.25rem;
        margin-bottom: 0.5rem;
      }

      & .card-description {
        margin-bottom: 0.75rem;
        padding-bottom: 0.75rem;
        border-bottom: 0.1rem dotted map-get($map: $colors, $key: my-gold);
      }
    }
  }
}

/* HORIZONTAL CARDS */
.product-card {
  display: flex;
  position: relative;
  flex-direction: column;
  justify-content: space-between;
  border: 0.1rem solid map-get($map: $colors, $key: dark);
  border-radius: 0.5rem;
  @include set-background(map-get($map: $colors, $key: light));

  @media screen and (min-width: map-get($map: $breakpoints, $key: sm)) {
    flex-direction: row;
    align-items: center;
    min-height: 80vh;
  }

  & .product-card-img {
    object-fit: cover;
    min-height: 225px;
    background-position: center;
    position: relative;

    @media screen and (min-width: map-get($map: $breakpoints, $key: sm)) {
      width: 50%;
    }

    &.disabled {
      opacity: 0.65;
    }
  }

  & .product-card-body {
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;

    @media screen and (min-width: map-get($map: $breakpoints, $key: sm)) {
      width: 50%;
    }

    & .product-card-header {
      display: flex;
      justify-content: space-between;
      padding-bottom: 0.5rem;
      border-bottom: 0.1rem dotted map-get($map: $colors, $key: my-gold);

      & .card-title {
        font-size: 1.5rem;
        text-transform: uppercase;
        letter-spacing: 0.125rem;
      }

      & .card-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: map-get($map: $colors, $key: my-gold);
      }
    }

    & .card-body {
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      height: 100%;
      margin: 0.25rem 0 0.5rem 0;

      & .card-lead {
        font-size: 1.125rem;
        font-weight: bold;
        line-height: 1;
        text-transform: uppercase;
        margin: 0.5rem 0;
      }

      & .card-body-item {
        margin-bottom: 0.75rem;
      }

      & .card-quantity {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-gap: 0.25rem;

        & input[type="number"] {
          margin-left: auto;
          margin-right: 0;
          max-width: 125px;
        }
      }

      & .card-list {
        & .card-list-item {
          padding: 0.25rem 0.25rem;
          background-color: lighten(map-get($map: $colors, $key: my-gold), 30%);
          border-bottom: 0.05rem solid map-get($map: $colors, $key: dark);

          &:first-child {
            border-top: 0.05rem solid map-get($map: $colors, $key: dark);
          }

          & span {
            font-weight: bold;
          }
        }
      }
    }
  }
}

/* IMAGES */
.img-text {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  text-align: center;
  @include set-background(map-get($map: $colors, $key: my-red));
  opacity: 0.8;
  font-size: 1.5rem;
  font-weight: bold;
  letter-spacing: 0.2rem;
  padding: 0.5rem 0;
  z-index: 10;
}

.img-link {
  position: absolute;
  top: 0%;
  left: 0%;
  transform: translate(2.5%, 2.5%);
  z-index: 10;

  & .user-actions {
    display: flex;
    justify-content: space-between;

    & a,
    button {
      margin-right: 0.5rem;

      &:last-child {
        margin-right: 0;
      }
    }
  }
}

/* USER CALL-TO-ACTIONS */
.user-actions {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100%, 1fr));
  grid-gap: 0.5rem;
  justify-content: center;

  @media screen and (min-width: map-get($map: $breakpoints, $key: md)) {
    display: flex;
    justify-content: space-between;

    & a,
    button {
      margin-right: 0.5rem;

      &:last-child {
        margin-right: 0;
      }
    }
  }
}
